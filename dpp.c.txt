#include <stdio.h>
#include <pthread.h>
#include <semaphore.h>

sem_t forks[5];

void *philosopher(void *arg) {
    int id = *((int *)arg);

    printf("Philosopher %d is thinking.\n", id);

    // Pick up forks: left first for all but philosopher 4, right first for philosopher 4
    if (id == 4) {
        sem_wait(&forks[(id + 1) % 5]);  // Right fork
        sem_wait(&forks[id]);            // Left fork
    } else {
        sem_wait(&forks[id]);            // Left fork
        sem_wait(&forks[(id + 1) % 5]);  // Right fork
    }

    printf("Philosopher %d is eating.\n", id);

    // Put down forks
    sem_post(&forks[id]);                // Left fork
    sem_post(&forks[(id + 1) % 5]);      // Right fork

    printf("Philosopher %d is done eating.\n", id);
}

int main() {
    pthread_t philosophers[5];
    int philosopher_ids[5] = {0, 1, 2, 3, 4};

    // Initialize semaphores (forks)
    for (int i = 0; i < 5; i++) {
        sem_init(&forks[i], 0, 1);
    }

    // Create philosopher threads
    for (int i = 0; i < 5; i++) {
        pthread_create(&philosophers[i], NULL, philosopher, &philosopher_ids[i]);
    }

    // Join philosopher threads (wait for them to finish)
    for (int i = 0; i < 5; i++) {
        pthread_join(philosophers[i], NULL);
    }

    // Destroy semaphores (clean up)
    for (int i = 0; i < 5; i++) {
        sem_destroy(&forks[i]);
    }

    return 0;
}
