#include <stdio.h>
#include <pthread.h>
#include <semaphore.h>

sem_t forks[5];

void *philosopher(void *arg) {
    int id = *((int *)arg);

    printf("Philosopher %d is thinking.\n", id);

    sem_wait(&forks[id]);
    sem_wait(&forks[(id + 1) % 5]);

    printf("Philosopher %d is eating.\n", id);

    sem_post(&forks[id]);
    sem_post(&forks[(id + 1) % 5]);

    printf("Philosopher %d is done eating.\n", id);
}

int main() {
    pthread_t philosophers[5];
    int philosopher_ids[5] = {0, 1, 2, 3, 4};

    for (int i = 0; i < 5; i++) sem_init(&forks[i], 0, 1);

    for (int i = 0; i < 5; i++) {
        pthread_create(&philosophers[i], NULL, philosopher, &philosopher_ids[i]);
    }

    for (int i = 0; i < 5; i++) {
        pthread_join(philosophers[i], NULL);
    }

    for (int i = 0; i < 5; i++) sem_destroy(&forks[i]);

    return 0;
}
