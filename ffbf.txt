#include <stdio.h>

void firstFit(int blockSize[], int blocks, int processSize[], int processes) {
    int allocation[processes];
    
    // Initialize allocation array with -1 (indicates unallocated)
    for (int i = 0; i < processes; i++)
        allocation[i] = -1;

    // Iterate over each process
    for (int i = 0; i < processes; i++) {
        for (int j = 0; j < blocks; j++) {
            if (blockSize[j] >= processSize[i]) {
                // Assign block j to process i
                allocation[i] = j;
                // Reduce available memory in this block
                blockSize[j] -= processSize[i];
                break;  // Break as soon as first fit is found
            }
        }
    }

    // Display results
    printf("First Fit Allocation:\n");
    printf("Process No.\tProcess Size\tBlock No.\n");
    for (int i = 0; i < processes; i++) {
        printf("%d\t\t%d\t\t", i + 1, processSize[i]);
        if (allocation[i] != -1)
            printf("%d\n", allocation[i] + 1);
        else
            printf("Not Allocated\n");
    }
}

void bestFit(int blockSize[], int blocks, int processSize[], int processes) {
    int allocation[processes];

    // Initialize allocation array with -1 (indicates unallocated)
    for (int i = 0; i < processes; i++)
        allocation[i] = -1;

    // Iterate over each process
    for (int i = 0; i < processes; i++) {
        int bestIndex = -1;
        for (int j = 0; j < blocks; j++) {
            if (blockSize[j] >= processSize[i]) {
                if (bestIndex == -1 || blockSize[j] < blockSize[bestIndex])
                    bestIndex = j;  // Find the smallest block that fits
            }
        }

        // If a suitable block was found
        if (bestIndex != -1) {
            allocation[i] = bestIndex;
            blockSize[bestIndex] -= processSize[i];  // Reduce available memory
        }
    }

    // Display results
    printf("Best Fit Allocation:\n");
    printf("Process No.\tProcess Size\tBlock No.\n");
    for (int i = 0; i < processes; i++) {
        printf("%d\t\t%d\t\t", i + 1, processSize[i]);
        if (allocation[i] != -1)
            printf("%d\n", allocation[i] + 1);
        else
            printf("Not Allocated\n");
    }
}

int main() {
    // Memory blocks and processes
    int blockSize[] = {100, 500, 200, 300, 600};
    int processSize[] = {212, 417, 112, 426};
    int blocks = sizeof(blockSize) / sizeof(blockSize[0]);
    int processes = sizeof(processSize) / sizeof(processSize[0]);

    // Perform First Fit
    firstFit(blockSize, blocks, processSize, processes);

    // Reinitialize blockSize array for Best Fit demonstration
    int blockSize2[] = {100, 500, 200, 300, 600};
    // Perform Best Fit
    bestFit(blockSize2, blocks, processSize, processes);

    return 0;
}
