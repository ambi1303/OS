#include <stdio.h>

void findWaitingTime(int processes[], int n, int burst_time[], int wait_time[], int quantum) {
    int remaining_time[n]; // Array to store remaining burst times
    for (int i = 0; i < n; i++) {
        remaining_time[i] = burst_time[i]; // Initialize remaining times with burst times
    }

    int time = 0; // Current time

    // Loop to process each process until all are complete
    while (1) {
        int done = 1; // Flag to indicate if all processes are done

        // Traverse all processes one by one
        for (int i = 0; i < n; i++) {
            if (remaining_time[i] > 0) {
                done = 0; // There is at least one process still to finish

                if (remaining_time[i] > quantum) {
                    // If the process has more burst time than the quantum
                    time += quantum; // Increase current time by quantum
                    remaining_time[i] -= quantum; // Decrease remaining burst time
                } else {
                    // If the process finishes within its quantum
                    time += remaining_time[i]; // Increase time by the remaining burst time
                    wait_time[i] = time - burst_time[i]; // Calculate waiting time
                    remaining_time[i] = 0; // Process is finished
                }
            }
        }

        // If all processes are done, exit the loop
        if (done == 1)
            break;
    }
}

void findTurnAroundTime(int processes[], int n, int burst_time[], int wait_time[], int tat[]) {
    // Calculate turn around time for all processes
    for (int i = 0; i < n; i++) {
        tat[i] = burst_time[i] + wait_time[i];
    }
}

void findAvgTime(int processes[], int n, int burst_time[], int quantum) {
    int wait_time[n], tat[n], total_wait_time = 0, total_tat = 0;

    // Calculate waiting time for all processes
    findWaitingTime(processes, n, burst_time, wait_time, quantum);

    // Calculate turn around time for all processes
    findTurnAroundTime(processes, n, burst_time, wait_time, tat);

    // Display results
    printf("Processes  Burst Time  Waiting Time  Turn-Around Time\n");

    for (int i = 0; i < n; i++) {
        total_wait_time += wait_time[i];
        total_tat += tat[i];
        printf("   %d\t\t%d\t    %d\t\t%d\n", i + 1, burst_time[i], wait_time[i], tat[i]);
    }

    printf("Average waiting time = %.2f\n", (float)total_wait_time / (float)n);
    printf("Average turn around time = %.2f\n", (float)total_tat / (float)n);
}

int main() {
    int processes[] = {1, 2, 3}; // Process IDs
    int n = sizeof processes / sizeof processes[0]; // Number of processes
    int burst_time[] = {10, 5, 8}; // Burst times for each process
    int quantum = 2; // Time quantum

    findAvgTime(processes, n, burst_time, quantum);
    return 0;
}
